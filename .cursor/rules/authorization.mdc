---
description: 
globs: app/controllers/**/*.rb,app/policies/**/*.rb
alwaysApply: false
---
---
name: Authorization with Pundit
type: auto_attached
glob: "**/*_controller.rb"
description: Enforces the use of the Pundit gem for all authorization logic within the application.
---

# Authorization with Pundit

All authorization logic in this application **must** be handled using the **Pundit gem**. Pundit provides a clear and robust way to define permissions for resources.

## Usage Guidelines

* **Pundit Gem:** Ensure `pundit` is included in your `Gemfile`.
* **Policies:** For every model that requires authorization, a corresponding Pundit policy class **must** be created (e.g., `app/policies/user_policy.rb` for `User` model).
* **Controller Integration:**
    * Include `Pundit::Authorization` in your `Api::V1::BaseController` or individual controllers as needed.
    * Use `authorize(@resource)` or `authorize(@resource, :action?)` in your controller actions.
    * For collections, use `policy_scope(Model)` to retrieve only authorized records.
* **Error Handling:**
    * Pundit raises `Pundit::NotAuthorizedError` when authorization fails. This error **must** be rescued in `Api::V1::BaseController` and rendered as an error response using `render_error` with a `403 Forbidden` status.
